import os
import pandas as pd
import numpy as np
import pickle
from pandas.api.types import CategoricalDtype

def clean_series(s):
    temp = s.copy()
    pat = r'[Uu][nN][kKs].*[nNd]$'
    temp[temp.str.contains(pat).values == 1] = np.nan
    temp = temp.cat.remove_unused_categories()
    return temp


def read_clean(filename):
    # Limiting the dtypes so the csv table could be read
    dtypes = {'MachineIdentifier': 'category',
              'ProductName': 'category',
              'EngineVersion': 'category',
              'AppVersion': 'category',
              'AvSigVersion': 'category',
              'IsBeta': 'int8',
              'RtpStateBitfield': 'float16',
              'IsSxsPassiveMode': 'int8',
              'DefaultBrowsersIdentifier': 'float16',
              'AVProductStatesIdentifier': 'float32',
              'AVProductsInstalled': 'float16',
              'AVProductsEnabled': 'float16',
              'HasTpm': 'int8',
              'CountryIdentifier': 'int16',
              'CityIdentifier': 'float32',
              'OrganizationIdentifier': 'float16',
              'GeoNameIdentifier': 'float16',
              'LocaleEnglishNameIdentifier': 'int8',
              'Platform': 'category',
              'Processor': 'category',
              'OsVer': 'category',
              'OsBuild': 'int16',
              'OsSuite': 'int16',
              'OsPlatformSubRelease': 'category',
              'OsBuildLab': 'category',
              'SkuEdition': 'category',
              'IsProtected': 'float16',
              'AutoSampleOptIn': 'int8',
              'PuaMode': 'category',
              'SMode': 'float16',
              'IeVerIdentifier': 'float16',
              'SmartScreen': 'category',
              'Firewall': 'float16',
              'UacLuaenable': 'float32',
              'Census_MDC2FormFactor': 'category',
              'Census_DeviceFamily': 'category',
              'Census_OEMNameIdentifier': 'float16',
              'Census_OEMModelIdentifier': 'float32',
              'Census_ProcessorCoreCount': 'float16',
              'Census_ProcessorManufacturerIdentifier': 'float16',
              'Census_ProcessorModelIdentifier': 'float16',
              'Census_ProcessorClass': 'category',
              'Census_PrimaryDiskTotalCapacity': 'float32',
              'Census_PrimaryDiskTypeName': 'category',
              'Census_SystemVolumeTotalCapacity': 'float32',
              'Census_HasOpticalDiskDrive': 'int8',
              'Census_TotalPhysicalRAM': 'float32',
              'Census_ChassisTypeName': 'category',
              'Census_InternalPrimaryDiagonalDisplaySizeInInches': 'float16',
              'Census_InternalPrimaryDisplayResolutionHorizontal': 'float16',
              'Census_InternalPrimaryDisplayResolutionVertical': 'float16',
              'Census_PowerPlatformRoleName': 'category',
              'Census_InternalBatteryType': 'category',
              'Census_InternalBatteryNumberOfCharges': 'float32',
              'Census_OSVersion': 'category',
              'Census_OSArchitecture': 'category',
              'Census_OSBranch': 'category',
              'Census_OSBuildNumber': 'int16',
              'Census_OSBuildRevision': 'int32',
              'Census_OSEdition': 'category',
              'Census_OSSkuName': 'category',
              'Census_OSInstallTypeName': 'category',
              'Census_OSInstallLanguageIdentifier': 'float16',
              'Census_OSUILocaleIdentifier': 'int16',
              'Census_OSWUAutoUpdateOptionsName': 'category',
              'Census_IsPortableOperatingSystem': 'int8',
              'Census_GenuineStateName': 'category',
              'Census_ActivationChannel': 'category',
              'Census_IsFlightingInternal': 'float16',
              'Census_IsFlightsDisabled': 'float16',
              'Census_FlightRing': 'category',
              'Census_ThresholdOptIn': 'float16',
              'Census_FirmwareManufacturerIdentifier': 'float16',
              'Census_FirmwareVersionIdentifier': 'float32',
              'Census_IsSecureBootEnabled': 'int8',
              'Census_IsWIMBootEnabled': 'float16',
              'Census_IsVirtualDevice': 'float16',
              'Census_IsTouchEnabled': 'int8',
              'Census_IsPenCapable': 'int8',
              'Census_IsAlwaysOnAlwaysConnectedCapable': 'float16',
              'Wdft_IsGamer': 'float16',
              'Wdft_RegionIdentifier': 'float16',
              'HasDetections': 'int8'}
    if not os.path.isfile(os.path.join('../data/interim', ''.join([filename[:-4], '_df.pkl']))):
        print('Reading from csv.')
        if not os.path.exists('../data/interim'):
            os.makedirs('../data/interim')
        df = pd.read_csv(os.path.join('../data/raw/', filename), dtype=dtypes)
        df.to_pickle(os.path.join('../data/interim', ''.join([filename[:-4], '_df.pkl'])))
    else:
        print('Reading from pickle.')
        df = pd.read_pickle(os.path.join('../data/interim', ''.join([filename[:-4], '_df.pkl'])))
    num_cols = ['AVProductsInstalled', 'OsBuild', 'OsSuite', 'AutoSampleOptIn',
                'UacLuaenable', 'Census_ProcessorCoreCount',
                'Census_ProcessorModelIdentifier', 'Census_PrimaryDiskTotalCapacity',
                'Census_SystemVolumeTotalCapacity', 'Census_TotalPhysicalRAM',
                'Census_InternalPrimaryDiagonalDisplaySizeInInches',
                'Census_InternalPrimaryDisplayResolutionHorizontal',
                'Census_InternalPrimaryDisplayResolutionVertical',
                'Census_InternalBatteryNumberOfCharges',
                'Census_OSBuildNumber', 'Census_OSBuildRevision']
    cat_cols = ['IsBeta', 'HasTpm', 'DefaultBrowsersIdentifier',
                'RtpStateBitfield', 'IsSxsPassiveMode', 'AVProductsEnabled',
                'IsProtected', 'SMode', 'Firewall', 'AVProductStatesIdentifier',
                'CountryIdentifier', 'CityIdentifier', 'OrganizationIdentifier',
                'GeoNameIdentifier', 'LocaleEnglishNameIdentifier', 'IeVerIdentifier',
                'Census_OEMNameIdentifier', 'Census_OEMModelIdentifier',
                'MachineIdentifier', 'ProductName', 'EngineVersion', 'AppVersion',
                'AvSigVersion', 'Platform', 'Processor', 'OsVer',
                'OsPlatformSubRelease', 'OsBuildLab', 'SkuEdition',
                'Census_ProcessorManufacturerIdentifier', 'PuaMode',
                'SmartScreen', 'Census_MDC2FormFactor', 'Census_DeviceFamily',
                'Census_OSInstallLanguageIdentifier', 'Census_OSUILocaleIdentifier',
                'Census_ProcessorClass', 'Census_PrimaryDiskTypeName',
                'Census_ChassisTypeName', 'Census_IsPortableOperatingSystem',
                'Census_PowerPlatformRoleName', 'Census_InternalBatteryType',
                'Census_OSVersion', 'Census_IsFlightingInternal',
                'Census_IsFlightsDisabled', 'Census_HasOpticalDiskDrive',
                'Census_IsSecureBootEnabled', 'Census_IsWIMBootEnabled',
                'Census_FirmwareManufacturerIdentifier',
                'Census_FirmwareVersionIdentifier',
                'Census_OSArchitecture', 'Census_OSBranch', 'Census_OSEdition',
                'Census_OSSkuName', 'Census_OSInstallTypeName',
                'Census_OSWUAutoUpdateOptionsName', 'Census_GenuineStateName',
                'Census_ActivationChannel', 'Census_FlightRing',
                'Census_IsVirtualDevice', 'Census_ThresholdOptIn',
                'Census_IsTouchEnabled', 'Census_IsPenCapable',
                'Census_IsAlwaysOnAlwaysConnectedCapable',
                'Wdft_IsGamer', 'Wdft_RegionIdentifier']
    df_cols = df.columns.tolist()
    if 'HasDetections' in df_cols:
        df_cols.remove('HasDetections')
    assert set(num_cols) | set(cat_cols) == set(df_cols)

    # Labeling missing values with np.nan
    if not os.path.isfile(
        os.path.join(
            '../data/interim',
            ''.join([filename[:-4],
                     '_df_subst.pkl'])
        )
    ):
        print('Substituting Unknown with np.nan.')
        for c in df.columns:
            if df[c].dtype.name == 'object':
                df[c] = df[c].astype('category')
            if df[c].dtype.name == 'category':
                df[c] = clean_series(df[c])
        df.to_pickle(
            os.path.join(
                '../data/interim',
                ''.join([filename[:-4],
                         '_df_subst.pkl'])
            )
        )
    else:
        print('Reading substituted file from pickle.')
        df = pd.read_pickle(
            os.path.join(
                '../data/interim',
                ''.join([filename[:-4],
                         '_df_subst.pkl'])
            )
        )
    with open('../data/interim/missing_cols.pkl', 'rb') as f:
        missing_cols = pickle.load(f)
    for c in missing_cols:
        df[c + '_na'] = df[c].isna().astype(int)
    with open('../data/interim/cols_many_nans.pkl', 'rb') as f:
        cols_many_nans = pickle.load(f)
    df.drop(labels=cols_many_nans, axis=1, inplace=True)
    num_cols = [c for c in num_cols if c not in cols_many_nans]
    cat_cols = [c for c in cat_cols if c not in cols_many_nans]
    missing_cols = [c for c in missing_cols if c not in cols_many_nans]

    # Labeling missing values with np.nan
    if not os.path.isfile(
            os.path.join(
                '../data/interim',
                ''.join([filename[:-4],
                         '_df_clean.pkl'])
            )
    ):
        print('Converting categorical columns to numeric and filling NaNs with median.')
        with open('../data/interim/df_labels.pkl', 'rb') as f:
            df_labels = pickle.load(f)
        for c in cat_cols:
            if not c == 'MachineIdentifier' and not c == 'HasDetections':
                df[c] = df[c].map(df_labels[c])
                # filling the unmapped values with 0, which correspond to nan for categorical values
                df[c].fillna(value=0, inplace=True)
        missing_cols = [c for c in df.columns if df[c].isnull().values.any()]
        with open('../data/interim/medians.pkl', 'rb') as f:
            medians = pickle.load(f)
        df.fillna(value=medians, inplace=True)
        df.to_pickle(
            os.path.join(
                '../data/interim',
                ''.join([filename[:-4],
                         '_df_clean.pkl'])
            )
        )
    else:
        print('Reading clean DataFrame from pickle.')
        df = pd.read_pickle(
            os.path.join(
                '../data/interim',
                ''.join([filename[:-4],
                         '_df_clean.pkl'])
            )
        )

    return df

if __name__ == '__main__':
    main()